/**
 * <h1>Tortoise-Hare Simulation</h1>
 * In this problem, you'll re-create the classic race of the tortoise and the hare.
 * You'll use random-number generation to develop a simulation of this memorable event.
 * Our contenders begin the race at square 1 of 70 squares. Each square represents a
 * possible position along the race course. The finish line is at square 70.
 * The first contender to reach or pass square 70 is rewarded with a pail of fresh carrots
 * and lettuce.
 *
 * @author Zhuoying Cai
 * @since 10-14-2017
 */

import java.security.SecureRandom;

public class TortoiseHare
{
    // instance variables
    private int endPosition;
    private int randNumb;
    private int positionT, positionH;
    private String[][] track;

    // rules for position of Tortoise
    private static final int FAST_PLOD = 3;
    private static final int SLIP = -6;
    private static final int SLOW_PLOD = 1;

    // rules for position of Hare
    private static final int SLEEP = 0;
    private static final int BIG_HOP = 9;
    private static final int BIG_SLIP = -12;
    private static final int SMALL_HOP = 1;
    private static final int SMALL_SLIP = -2;

    private static final SecureRandom randomNumber = new SecureRandom();

    /**
     * This is default constructor that set the tracks for Tortoise and Hare
     * numbered from position 1 to 70.
     */
    public TortoiseHare()
    {
        this.endPosition = 70;

        track = new String[2][endPosition];
        for (int row = 0; row < track.length; row++)
        {
            for (int column = 0; column < track[0].length; column++)
            {
                track[row][column] = " ";
            }
        }
    }

    /**
     * This constructor initialized object with end position from user.
     * @param endPosition This is user input end position number.
     * @exception IllegalArgumentException On invalid end position.
     * @see IllegalArgumentException
     */
    public TortoiseHare(int endPosition)
    {
        if (endPosition <= 1)
            throw new IllegalArgumentException("Invalid Number");

        this.endPosition = endPosition;

        track = new String[2][endPosition];
        for (int row = 0; row < track.length; row++)
        {
            for (int column = 0; column < track[0].length; column++)
            {
                track[row][column] = " ";
            }
        }
    }

    /**
     * This method is used to set the end position of the track.
     * @param endPosition This is the end position.
     */
    public void setEndPosition(int endPosition) { this.endPosition = endPosition; }

    /**
     * This method is used to retrieve the random number generated by the SecureNumber.
     * @return int This returns the random number.
     */
    public int getRandNumb() { return randNumb; }

    /**
     * This method is used to retrieve the end position of the track.
     * @return int This returns the end position of the track.
     */
    public int getEndPosition() { return endPosition; }

    /**
     * This method is used to retrieve the position of Tortoise.
     * @return int This returns the position of Tortoise.
     */
    public int getPositionT() { return positionT; }

    /**
     * This method is used to retrieve the position of Hare.
     * @return int This returns the position of Hare.
     */
    public int getPositionH() { return positionH; }

    /**
     * This methods is to adjust Tortoise position according to the rules.
     * @param Numb Tortoise adjusts its position according to this number.
     * @return String Mark a letter T on the position of the Tortoise.
     */
    public String adjustT(int Numb)
    {
            if (Numb >= 1 && Numb <= 5)
            {
                positionT += FAST_PLOD;
            }

            if (Numb == 6 || Numb == 7)
            {
                positionT += SLIP;
            }

            if (Numb >= 8 && Numb <= 10)
            {
                positionT += SLOW_PLOD;
            }

            if (positionT < 0)
            {
                positionT = 0;
            }

            if (positionT >= getEndPosition() - 1)
            {
                positionT = getEndPosition() - 1;
            }

            return track[0][positionT] = "T";
    }

    /**
     * This methods is to adjust Hare position according to the rules.
     * @param Numb Hare adjusts its position according to this number.
     * @return String Mark a letter H on the position of the Hare.
     */
    public String adjustH(int Numb)
    {
        if (Numb == 1 || Numb == 2)
        {
            positionH += SLEEP;
        }

        if (Numb == 3 || Numb == 4)
        {
            positionH += BIG_HOP;
        }

        if (Numb == 5)
        {
            positionH += BIG_SLIP;
        }

        if (Numb >= 6 && Numb <= 8)
        {
            positionH += SMALL_HOP;
        }

        if (Numb == 9 || Numb == 10)
        {
            positionH += SMALL_SLIP;
        }

        if (positionH < 0)
        {
            positionH = 0;
        }

        if (positionH >= getEndPosition() - 1)
        {
            positionH = getEndPosition() - 1;
        }

        return track[1][positionH] = "H";
    }

    /**
     * This method is to generate the random number and Tortoise and Hare
     * adjust their positions according to the number
     */
    public void rollDice()
    {
        randNumb = 1 + randomNumber.nextInt(10); // random number ranges from 1 to 10
        this.adjustT(randNumb);
        this.adjustH(randNumb);
    }

    /**
     * This method is used to print the Track with Tortoise and Hare's position
     * and update the track each time they move.
     */
    public void printTrack()
    {
        for (int column = 0; column < track[0].length; column++)
        {
            System.out.printf("%d\t", column + 1);
        }

        System.out.println();

        for (String[] row : track)
        {
            for (String column : row)
            {
                System.out.printf("%s\t", column);
            }
            System.out.println();
        }

        track[0][getPositionT()] = " ";
        track[1][getPositionH()] = " ";

        System.out.println();
    }
}
